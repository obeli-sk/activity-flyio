use std::fmt::Debug;

use serde::{Deserialize, Serialize, de::DeserializeOwned};
#[derive(derive_more::Debug, derive_more::From)]
#[debug("{_0:?}")] // Transparent debug
// FIXME: Remove once wit-bindgen supports path-specific derives
pub(crate) struct KebabWrapper<T: Debug + Serialize + DeserializeOwned>(pub(crate) T);

impl<T: Debug + Serialize + DeserializeOwned> Serialize for KebabWrapper<T> {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        let debug_str = format!("{:?}", self.0);
        let expected_type = std::any::type_name::<T>().rsplit("::").next().unwrap();
        let debug_str = debug_str
            .strip_prefix(expected_type)
            .expect("prefix is generated by wit-bindgen")
            .strip_prefix("::")
            .expect(":: delimiter is generated by wit-bindgen");
        let kebab_str = heck::ToKebabCase::to_kebab_case(debug_str);
        serializer.serialize_str(&kebab_str)
    }
}

impl<'de, T: Debug + Serialize + DeserializeOwned> Deserialize<'de> for KebabWrapper<T> {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        deserializer.deserialize_string(KebabVisitor {
            _phantom_data: Default::default(),
        })
    }
}

struct KebabVisitor<T: Debug + Serialize + DeserializeOwned> {
    _phantom_data: std::marker::PhantomData<T>,
}

impl<'de, T: Debug + Serialize + DeserializeOwned> serde::de::Visitor<'de> for KebabVisitor<T> {
    type Value = KebabWrapper<T>;

    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
        let expected_type = std::any::type_name::<T>().rsplit("::").next().unwrap();
        formatter.write_str("a lowercase string representing a ")?;
        formatter.write_str(expected_type)
    }

    fn visit_str<E>(self, value: &str) -> Result<Self::Value, E>
    where
        E: serde::de::Error,
    {
        let camel_cased = heck::AsUpperCamelCase(value.to_owned());

        let serde_value = serde_json::value::Value::String(camel_cased.to_string());
        serde_json::from_value::<T>(serde_value)
            .map(|inner| KebabWrapper(inner))
            .map_err(E::custom)
    }
}
